const express = require('express');
const { Resend } = require('resend');
const router = express.Router();

const resend = new Resend(process.env.RESEND_API_KEY);

router.post('/', async (req, res) => {
  try {
    const { summary, recipients, subject } = req.body;

    if (!summary) {
      return res.status(400).json({ error: 'Summary is required' });
    }

    if (!recipients || recipients.length === 0) {
      return res
        .status(400)
        .json({ error: 'At least one recipient email is required' });
    }

    if (!process.env.RESEND_API_KEY) {
      return res.status(500).json({ error: 'Resend API key not configured' });
    }

    if (!process.env.FROM_EMAIL) {
      return res.status(500).json({ error: 'From email not configured' });
    }

    // Validate email format
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    const invalidEmails = recipients.filter(
      email => !emailRegex.test(email.trim())
    );

    if (invalidEmails.length > 0) {
      return res.status(400).json({
        error: `Invalid email format: ${invalidEmails.join(', ')}`,
      });
    }

    const emailSubject = subject || 'Meeting Summary';

    // Create HTML email content
    const htmlContent = `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
        <h2 style="color: #2563eb; border-bottom: 2px solid #e5e7eb; padding-bottom: 10px;">
          üìù Meeting Summary
        </h2>
        <div style="background-color: #f9fafb; padding: 20px; border-radius: 8px; margin: 20px 0;">
          <pre style="white-space: pre-wrap; font-family: inherit; margin: 0;">${summary}</pre>
        </div>
        <hr style="border: none; border-top: 1px solid #e5e7eb; margin: 20px 0;">
        <p style="color: #6b7280; font-size: 14px; text-align: center;">
          This summary was generated by AI Meeting Summarizer
        </p>
      </div>
    `;

    // Send emails to all recipients
    const emailPromises = recipients.map(email =>
      resend.emails.send({
        from: process.env.FROM_EMAIL,
        to: email.trim(),
        subject: emailSubject,
        html: htmlContent,
        text: `Meeting Summary\n\n${summary}\n\n---\nThis summary was generated by AI Meeting Summarizer`,
      })
    );

    const results = await Promise.allSettled(emailPromises);

    const successful = results.filter(result => result.status === 'fulfilled');
    const failed = results.filter(result => result.status === 'rejected');

    if (failed.length > 0) {
      console.error(
        'Failed email sends:',
        failed.map(f => f.reason)
      );
    }

    if (successful.length === 0) {
      return res.status(500).json({
        error: 'Failed to send emails to any recipients',
        details: failed.map(f => f.reason?.message || 'Unknown error'),
      });
    }

    res.json({
      success: true,
      message: `Email sent successfully to ${successful.length} recipient(s)`,
      sent: successful.length,
      failed: failed.length,
      recipients: recipients,
    });
  } catch (error) {
    console.error('Email sending error:', error);

    if (error.message?.includes('API key')) {
      return res.status(401).json({ error: 'Invalid Resend API key' });
    }

    res.status(500).json({
      error: 'Failed to send email',
      message: error.message,
    });
  }
});

module.exports = router;
